# -*- coding: utf-8 -*-
"""Tensorflow_Neuron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/101DdR_lsRn63FCmJ_gWWwF7W1exdw-GB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import tensorflow as tf
from tensorflow import keras
'''
#x = np.random.randint(20,55,20)
#y = np.random.randint(0,2,20)
x = np.array([20, 45, 35, 50, 35, 20, 30, 39, 46, 40, 41, 22, 34, 53, 54, 37, 26, 40, 53, 23])
y = np.array([0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0])
print('X :',x)
print('Y :',y)'''

(x_tr,y_tr),(x_t,y_t) = keras.datasets.mnist.load_data()
len(x_tr)
x_tr[0]

plt.matshow(x_tr[9])

x_tr = x_tr/255
x_t = x_t/255

#flatter the array
x_tr_flat = x_tr.reshape(len(x_tr),28*28)
x_tr_flat.shape
x_t_flat = x_t.reshape(len(x_t),28*28)
x_t_flat.shape

model = keras.Sequential([
        keras.layers.Dense(10,input_shape=(784,), activation = 'sigmoid')
])
model.compile(optimizer='adam', 
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

model.fit(x_tr_flat,y_tr,epochs = 7)

model.evaluate(x_t_flat,y_t)

plt.matshow(x_t[4])

y_predicted = model.predict(x_t_flat)
np.argmax(prediction[4])

y_predicted = [np.argmax(i) for i in y_predicted]
y_predicted[:5]

cm = tf.math.confusion_matrix(labels = y_t, predictions = y_predicted)
cm

import seaborn as sns
plt.figure(figsize=(10,10))
sns.heatmap(cm, annot = True, fmt = 'd')
plt.xlabel('Predicted')
plt.ylabel('Actual')

model = keras.Sequential([
        keras.layers.Dense(100,input_shape=(784,), activation = 'relu'),
        keras.layers.Dense(10, activation = 'sigmoid')
])
model.compile(optimizer='adam', 
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

model.fit(x_tr_flat,y_tr,epochs = 7)

model.evaluate(x_t_flat,y_t)

cm = tf.math.confusion_matrix(labels = y_t, predictions = y_predicted)
cm

import seaborn as sns
plt.figure(figsize=(10,10))
sns.heatmap(cm, annot = True, fmt = 'd')
plt.xlabel('Predicted')
plt.ylabel('Actual')

from matplotlib.cbook import flatten
# without flattenning the array
model = keras.Sequential([
        keras.layers.Flatten(input_shape = (28,28)),
        keras.layers.Dense(100, activation = 'relu'),
        keras.layers.Dense(10, activation = 'sigmoid')
])
model.compile(optimizer='adam', 
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

model.fit(x_tr,y_tr,epochs = 7)

model.evaluate(x_t,y_t)

